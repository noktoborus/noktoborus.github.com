---
layout: posts
date: 2011-05-21 13:42:12 +00:00
title: Khronos EGL
description: Вольный перевод спецификации EGL.
---

"EGL":http://www.khronos.org/egl/ (В словаре "X.org":http://www.x.org/ аббривеатура раскрывается как "Embedded-System Graphics Library":http://www.x.org/wiki/Development/Documentation/Glossary#EGL ) представлена как связующий компонент между API отрисовки изображения и оконной подсистемой. Предоставляет механизмы для создания поверхности для рисования, на которой выбранный API отрисовки сможет размещать результат своей работы, создаёт контекст для клиентских API и синхронизирует отрисовку клиентским API ровно как оригинальный, для платформы, API отрисовки. Не поддерживает возможность удалённой или непрямой отрисовки, как в подобном GLX API.

h3(#initial). Инициализация.

{% highlight c %}
{% include egl-fail/gr00_ru.c %}
{% endhighlight %}

Лично у меня этот кусочек кода, после того как я его скомпилировал командой @gcc -o gr00 gr00.c `pkg-config --libs --cflags egl`@ и запустил, выдал следующее:

{% highlight text %}
{% include egl-fail/gr00_0.txt %}
{% endhighlight %}

Как можно заметить, сейчас у меня последняя версия EGL, спецификация частенько обновляется, по этому идём на "http://www.khronos.org/registry/egl/":http://www.khronos.org/registry/egl/ ищем нужную нам. Или же скачиваем последнюю версию с помощью простенького скрипта:

{% highlight sh %}
{% include egl-fail/getegl.sh %}
{% endhighlight %}

После получения копии спецификации стоит ознакомиться с "осбенностями реализации в Mesa 3D":http://www.mesa3d.org/egl.html. Чтобы не заставлять открыть кучу окон, приведу некоторые интересные таблицы:

|_\2. Поддерживаемые переменные окружения для Mesa3D EGL |
| EGL_DRIVERS_PATH	| Путь к директории с драйверами Mesa3D EGL, указываются списком директорий, разделяемых двоеточием. Игнорируются программами с setuid/setgid.|
| EGL_DRIVER		| Используемый драйвер, иначе Mesa будет пытаться запустить все возможные драйвера по очереди, выбирая наиболее приоритетный (как подсчитывается приоритет не знаю). Игнорируется программами с setuid/setgid.|
| EGL_PLATFORM		| Указывает какую платформу использовать драйвером, если не задействован, то используется первая платформа, указанная под ключом @--with-egl-platforms@ при сборке Mesa3D|
| EGL_LOG_LEVEL		| Уровень регистрации сообщений: debug, info, warning, fatal|
| EGL_SOFTWARE		| Переводит отрисовку в програмный режим, для драйверов, поддерживающих апаратную и програмную способы отисовки.|

|_\2. Возможные значения для @EGL_DRIVER@|
| egl_gallium	| Драйвер, основанный на Gallium3D. Поддерживает все то же, что поддерживает Gallium3D. Единственный драйвер с поддержкой OpenVG. Переменная @EGL_PLATFORM@ с этим драйвером может принять следующие значения: x11, drm, fbdev, gdi.|
| egl_dri2		| Поддерживает платформы (@EGL_PLATFORM@): x11 и drm. Для поддержки x11 использует протокол DRI2 или XCB-DRI2. Программа должна быть слинкована с libGL или подобной libGL библиотекой (libGLESv1_CM, libGLESv2).|
| egl_glx		| EGL API-обёртка над GLX, возможности этого драйвера не превышают возможностей GLX.|

Как видно из первой таблицы, для диагностики проблем стоит положить в переменную окружения @EGL_LOG_LEVEL@ значение debug.

{% highlight sh %}
export EGL_LOG_LEVEL=debug
{% endhighlight %}

Тогда вывод нашей программы будет приблизительно таким:

{% highlight text %}
{% include egl-fail/gr00_1.txt %}
{% endhighlight %}

Прежде чем рисовать что-либо требуется получить контекст рендера (Rendering Context :@EGLContext@) (машина состояний, известная как клиентский API (OpenGL, OpenVG)) и связать его с поверхностью для рисования (Drawing Surface :@EGLSurface@). Чтобы получить контекст рендера, нужно получить профиль конфигурации или конфиг (:@EGLConfig@) с помощью вызова "eglChooseConfig ()":http://www.khronos.org/opengles/documentation/opengles1_0/html/eglChooseConfig.html или "eglGetConfigs ()":http://www.khronos.org/opengles/documentation/opengles1_0/html/eglGetConfigs.html. Отличие первого от второго в том, что во втором не указываются интересующие параметры рендера (отсутствует аргумент @attrib_list@).

Попробуем получить первые две возможные конфигурации с помощью "eglGetConfigs ()":http://www.khronos.org/opengles/documentation/opengles1_0/html/eglGetConfigs.html и распечатать их:

{% highlight c %}
{% include egl-fail/gr01_ru.c %}
{% endhighlight %}

Компилируем это с теми же флагами, что и предыдущую програмку (@gcc -o gr00 gr00.c `pkg-config --libs --cflags egl`@) и получаем приблизительно такой результат:

{% highlight text %}
{% include egl-fail/gr01_0.txt %}
{% endhighlight %}

Вероятно, удобно иметь на руках все возможные конфигурации, а потом ими распоряжаться по своему усмотрению, но из всех возможных нам придётся искать подходящий. Для этого есть вызов @eglChooseConfig ()@, в котором, под аргументом @attrib_list@ указываются требуемые атрибуты в виде пары "атрибут, значение". Список терминируется @EGL_NONE@.

|_\2. Атрибуты EGLConfig |
|_. Атрибут						|_. Описание |
| EGL_CONFIG_ID					| уникальный идентификатор EGLConfig.|
| EGL_BUFFER_SIZE				| Общее количество бит компонентов в буфере цвета. |
| EGL_RED_SIZE					| Количество бит красного в буфере цвета. |
| EGL_GREEN_SIZE				| Количество бит зелёного в буфере цвета. |
| EGL_BLUE_SIZE					| Количество бит синего в буфере цвета. |
| EGL_LUMINANCE_SIZE			| Количество бит яркости (Luminance) в буфере цвета. |
| EGL_ALPHA_SIZE				| Количество бит прозрачности (Alpha) в буфере цвета. |
| EGL_ALPHA_MASK_SIZE			| Количество бит маски прозрачности в буфере маски (mask buffer). |
| EGL_BIND_TO_TEXTURE_RGB		| True если привязывается к RGB-текстуре.[1] |
| EGL_BIND_TO_TEXTURE_RGBA		| True если привязывается к RGBA-текстуре.[1] |
| EGL_COLOR_BUFFER_TYPE			| Тип буфера цвета. |
| EGL_CONFIG_CAVEAT				| Пояснения к конфигурации. |
| EGL_CONFORMANT				| Совместимость конфигурации с контекстом.
Возможные значения такие же, как и для @EGL_RENDERABLE_TYPE@. |
| EGL_DEPTH_SIZE				| Количество бит буфера глубины. |
| EGL_LEVEL						| Уровень буфера фреймов.
Слой в фреймбуфере или уровень вложенности поверхности (EGLSurface), созданной с @eglCreateWindowSurface ()@. Значение 0 указывает на уровень по-умолчанию. Поведение окон, расположенных в оверлеях и вложениях зависит от реализации в оконной системы платформы. |
| EGL_MATCH_NATIVE_PIXMAP		| Используется только для поиска подходящей конфигурации. |
| EGL_MAX_PBUFFER_WIDTH			| Наибольшая высота пиксельного буфера.[2] |
| EGL_MAX_PBUFFER_HEIGHT		| Наибольшая ширина пиксельного буфера.[2] |
| EGL_MAX_PBUFFER_PIXELS		| Наибольший размер пиксельного буфера.
Максимальное значение произведения @EGL_MAX_PBUFFERS_WIDTH@ и @EGL_MAX_PBUFFERS_HEIGTH@, которое можно передать в @eglCreatePbufferSurface ()@.
Значение этого атрибута зависит от реализации и может быть меньше произведения @EGL_MAX_PBUFFER_WIDTH@ и @EGL_MAX_PBUFFER_HEIGHT@.
Это значение статичное и не причастно к выделению других ресурсов и буферов пикселей для фреймбуфера. По этому не позволительно выделять память под буфер пикселей с значением этого атрибута. |
| EGL_MAX_SWAP_INTERVAL			| Наибольшая скорость обмена.
Максимальное значение, которое может быть передано вызову @eglSwapInterval ()@, указывает количество интервалов до смены бурефа, после вызова @eglSwapBuffers ()@. Большее значение обрезается до значения этого атрибута. |
| EGL_MIN_SWAP_INTERVAL			| Наименьшая скорость обмена.
Минимальное значение, которое может быть передано вызову @eglSwapInterval ()@. В остальном аналогично @EGL_MAX_SWAP_INTERVAL@. |
| EGL_NATIVE_RENDERABLE			| True при использовании родной API для рисования.
Сообщает о возможности оконной системы рисовать на поверхности, созданной с соответсвующим EGLConfig.[3] |
| EGL_NATIVE_VISUAL_ID			| Целочисленное представление платформо-зависимого идентификатора окна. |
| EGL_NATIVE_VISUAL_TYPE		| Целочисленное представление платформо-зависимого типа окна. |
| EGL_RENDERABLE_TYPE			| Поддержка клиентских API.
Указывает на то, какие клиентские API могут использоваться для отрисовки на поверхность, созданную в соотвествии с этим EGLConfig. |
| EGL_SAMPLE_BUFFERS			| Количество буферов смешения. |
| EGL_SAMPLES					| Количество образцов на пиксель (sample per pixel). |
| EGL_STENCIL_SIZE				| Количество бит трафарета в буфере трафарета (stencil buffer). |
| EGL_SURFACE_TYPE				| Типы поддерживаемых поверхностей для рисования.
если поверхность создана на основе этого конфига с флагом @EGL_WINDOW_BIT@, то создать поверхности @EGL_PIXMAP_BIT@ (пиксельная карта) или @EGL_PBUFFER_BIT@ (пиксельный буфер) нельзя. |
| EGL_TRANSPARENT_TYPE			| Тип поддерживаемой прозрачности.
Если содержит @EGL_TRANSPARENT_RGB@, то EGLConfig поддерживает прозрачность, то прозрачность красного, зелёного и синего пикселей будут читаться из фреймбуфера соотвественно значениям @EGL_TRANSPARENT_RED_VALUE@, @EGL_TRANSPARENT_GREEN_VALUE@ и @EGL_TRANSPARENT_BLUE_VALUE@.
Если равен @EGL_NONE@, то прозрачность не поддерживается, а значения @EGL_TRANSPARENT_RED_VALUE@, @EGL_TRANSPARENT_GREEN_VALUE@, @EGL_TRANSPARENT_BLUE_VALUE@ не определены. Иначе, это может трактоваться как значение фреймбуфера между 0 и максимальное значение для этого компонента, к примеру, для @EGL_TRANSPARENT_RED_VALUE@ дипазон будет между 0 и (2 * @EGL_RED_SIZE@ - 1). |
| EGL_TRANSPARENT_RED_VALUE		| Прозрачность красного канала. |
| EGL_TRANSPARENT_GREEN_VALUE	| Прозрачность зелёного канала. |
| EGL_TRANSPARENT_BLUE_VALUE	| Прозрачность синего канала. |
| EGL_CONTEXT_CLIENT_VERSION	| Используется только при создании контекста (@eglCreateContext ()@), указывает на версию API, "1" для OpenGL ES 1.x, "2" для OpenGL ES 2.x.  Если не используете OpenGL ES, то не стоит указывать этот атрибут.	|

fn1. Указывают на возможность привязки буфера цвета из буфера пикселей (pbuffer) к OpenGL ES текстуре формата RGB или RGBA соответственно. Сейчас только буфера пикселей поддерживаются для отображения в текстуру, при условии, что один их этих атрибутов содержит @EGL_TRUE@ и значение атрибута @EGL_SURFACE_TYPE@ содержит @EGL_PBUFFER_BIT@. Позволительно привязывать RGBA отображение к RGB текстуре, Alpha-компонента, в таком случае, будет игнорироваться.
Реализация библиотеки может позволить себе не поддерживать @EGL_BIND_TO_TEXTURE_RGB@ для RGBA-экрана.
Привязка к текстуре не поддерживается для OpenGL текстур.

fn2. Указывают на максимальную высоту и ширину, которую можно передать в @eglCreatePbufferSurface ()@.

fn3. EGL и OpenGL ES поддерживает две модели отрисовки: задний буфер и одинарный буфер.
Отрисовка во втором буфере используется окнами и пиксельными буферами. Память для буферов цвета, используемые во время отрисовки, управляются EGL. Когда клиент заканчивает отрисовку во втором буфере, то буфера могут быть перемещены с помощью @eglSwapBuffers ()@. Поверхность пиксельного буфера с задний буферезацией, но без ассоциированного окна не требует перемещения.
Одиночный буфер используется для пиксельных карт. Память для буфера цвета указывается в момент создания, при настройки изображения в графической платформе. Карты пикселей не поддерживают смешенивание, по причине отсутствия места в изображениях, для храния дополнительной информации, созданные графической платформы.
Некоторые клиентские API, такие как OpenGL и OpenVG, так же поддерживаются отрисовку с одним буфером.
Копирование в обе стороны между задним буфером и одиночным возможно с помощью @eglCopyBuffers ()@.

|_\4. Типы значений и условия сравнения атрибутов в EGLConfig |
|_. Атрибут						|_. Тип		|_. Значение по-умолчанию |_. Условие выбора |
| EGL_BUFFER_SIZE				| integer	| 0					| Не меньше			|
| EGL_RED_SIZE					| integer	| 0					| Не меньше			|
| EGL_GREEN_SIZE				| integer	| 0					| Не меньше			|
| EGL_BLUE_SIZE					| integer	| 0					| Не меньше			|
| EGL_LUMINANCE_SIZE			| integer	| 0					| Не меньше			|
| EGL_ALPHA_SIZE				| integer	| 0					| Не меньше			|
| EGL_ALPHA_MASK_SIZE			| integer	| 0					| Не меньше			|
| EGL_BIND_TO_TEXTURE_RGB		| boolean	| EGL_DONT_CARE		| Совпадение		|
| EGL_BIND_TO_TEXTURE_RGBA		| boolean	| EGL_DONT_CARE		| Совпадение		|
| EGL_COLOR_BUFFER_TYPE			| enum		| EGL_RGB_BUFFER	| Совпадение		|
| EGL_CONFIG_CAVEAT				| enum		| EGL_DONT_CARE		| Совпадение		|
| EGL_CONFIG_ID					| integer	| EGL_DONT_CARE		| Совпадение		|
| EGL_CONFORMANT				| bitmask	| 0					| Маска				|
| EGL_DEPTH_SIZE				| integer	| 0					| Не меньше			|
| EGL_LEVEL						| integer	| 0					| Совпадение		|
| EGL_MATCH_NATIVE_PIXMAP[4]	| -			| EGL_NONE			| Специальное[4]	|
| EGL_MAX_PBUFFER_WIDTH			| integer	| -					| -[5]				|
| EGL_MAX_PBUFFER_HEIGHT		| integer	| -					| -					|
| EGL_MAX_PBUFFER_PIXELS		| integer	| -					| -					|
| EGL_MAX_SWAP_INTERVAL			| integer	| EGL_DONT_CARE		| Совпадение		|
| EGL_MIN_SWAP_INTERVAL			| integer	| EGL_DONT_CARE		| Совпадение		|
| EGL_NATIVE_RENDERABLE			| boolean	| EGL_DONT_CARE		| Совпадение		|
| EGL_NATIVE_VISUAL_ID			| integer	| -					| -					|
| EGL_NATIVE_VISUAL_TYPE		| integer	| EGL_DONT_CARE		| Совпадение		|
| EGL_RENDERABLE_TYPE			| bitmask	| EGL_OPENGL_ES_BIT	| Маска				|
| EGL_SAMPLE_BUFFERS			| integer	| 0					| Не меньше			|
| EGL_SAMPLES					| integer	| 0					| Не меньше			|
| EGL_STENCIL_SIZE				| integer	| 0 				| Не меньше			|
| EGL_SURFACE_TYPE				| bitmask	| EGL_WINDOW_BIT	| Маска				|
| EGL_TRANSPARENT_TYPE			| enum		| EGL_NONE			| Совпадение		|
| EGL_TRANSPARENT_RED_VALUE		| integer	| EGL_DONT_CARE		| Совпадение		|
| EGL_TRANSPARENT_GREEN_VALUE	| integer	| EGL_DONT_CARE		| Совпадение		|
| EGL_TRANSPARENT_BLUE_VALUE	| integer	| EGL_DONT_CARE		| Совпадение		|
| EGL_CONTEXT_CLIENT_VERSION	| integer	| 1					| -					|

fn4. Если @EGL_MATCH_NATIVE_PIXMAP@ указано в списке атрибутов, то это значение может использоваться как правильный указатель на изображение графической платформы.

fn5. Все ключи, помеченные "-" в этом столбце, не учавствуют в процессе выбора конфигурации.

|_. Ключ	|_. Описание	|
|_\2. Возможные маски @EGL_SURFACE_TYPE@ |
| EGL_WINDOW_BIT	| Поддержка окон	|
| EGL_PIXMAP_BIT	| Поддержка пиксельных карт	|
| EGL_PBUFFER_BIT	| Поддержка пиксельного буфера |
| EGL_MULTISAMPLE_RESOLVE_BOX_BIT	| supports box filtered multisample resolve (WTF?)
Позволяет использовать атрибут поверхности @EGL_MULTISAMPLE_RESOLVE@ с помощью @eglSurfaceAttrib ()@, как фильтр |
| EGL_SWAP_BEHAVIOR_PRESERVED_BIT	| Поддержка настраевоемого обмена для буферов цвета
Позволяет использовать атрибут поверхности @EGL_SWAP_BEHAVIOR@ с помощью @eglSurfaceAttrib ()@, для преобработки содержимого буфера цвета |
| EGL_VG_COLORSPACE_LINEAR_BIT		| Поддержка отрисовки OpenVG в линейном пространстве цветов
Позволяет использовать атрибут @EGL_VG_COLORSPACE@ в @EGL_VG_COLORSPACE_LINEAR@ при создании окна, пиксельных карты или буфера |
| EGL_VG_ALPHA_FORMAT_PRE_BIT		| Поддержка отрисовки OpenVG с прерасчитаной Альфа
Позволяет использовать атрибут @EGL_VG_ALPHA_FORMAT@ в @EGL_VG_ALPHA_FORMAT_PRE@ при создании окна, пиксельных карты или буфера |
|_\2. Маски @EGL_RENDERABLE_TYPE@ (поддерживаемые клиентские API) и @EGL_CONFORMANT@ |
| EGL_OPENGL_BIT		| OpenGL 1.x или 2.x	|
| EGL_OPENGL_ES_BIT		| OpenGL ES 1.x	|
| EGL_OPENGL_ES2_BIT	| OpenGL ES 2.x	|
| EGL_OPENVG_BIT		| OpenVG 1.x	|
|_\2. Значения @EGL_CONFIG_CAVEAT@ |
| EGL_NONE					| Никаких особых пояснений. |
| EGL_SLOW_CONFIG			| Пониженная производительность при рисовании, к примеру, может отсутствовать апаратная поддержка глубина буфера цвета. |
| EGL_NON_CONFORMANT_CONFIG	| Означает то, что при рисовании на повехность с этой конфигурацией не проходятся требуемые OpenGL ES тесты совместимости. ( @EGL_NON_CONFORMANT_CONFIG@ устарел, и всё информация должна излвекаьтся из атрибута @EGL_CONFORMANT@ каждого клиентского API, но не для OpenGL ES)|

h4(ihead). Буфер цвета

p(ibody). В буфере цвета содержатся значения цвета, которые доступны всем клиентским API (OpenGL, OpenVG, ...) @EGL_COLOR_BUFFER_TYPE@ указывает на тип буфера, принимая значения @EGL_RGB_BUFFER@ для RGB буфера цвета (RBG color buffer) или @EGL_LUMINANCE_BUFFER@ для буфера яркости цвета (luminance color buffer). Для RGB атрибут @EGL_LUMINANCE_SIZE@ должен быть равен нулю, в отличие от атрибутов @EGL_RED_SIZE@, @EGL_GREEN_SIZE@, @EGL_BLUE_SIZE@. Для яркостного буфера значение атрибута @EGL_LUMINANCE_SIZE@ должно быть больше нуля, а @EGL_RED_SIZE@, @EGL_GREEN_SIZE@ и @EGL_BLUE_SIZE@ должны соответсвовать нулю. Значение атрибута @EGL_ALPHA_SIZE@ может принимать любое, разумное, значение в обоих случаях.

p(ibody). Если поддерживается отрисовка OpenGL или OpenGL ES для буфера яркости (как значение атрибута @EGL_RENDERABLE_TYPE@), то, в согласии с RGB, ключ @GL_RED_BITS@ равен значению @EGL_LUMINANCE_SIZE@ и значения @GL_GREEN_BITS@ и @GL_BLUE_BITS@ равны нулю. Красная компонента фрагмента записывается в канал буфера цвета, зелёная и синяя отбрасываются и компонента прозрачности (alpha) сохраняется в alpha-канале буфера цвета (если существует).

h4(ihead). Буфер маски прозрачности (Alpha Mask Buffer)

p(ibody). Используется только OpenVG. @EGL_ALPHA_MASK_SIZE@ указывает на глубину этого буфера.

h4(ihead). Буфер глубины

p(ibody). Используется совместно OpenGL и OpenGL ES. Содержит информацию о глубине, генерируемую в процессе растеризации. @EGL_DEPTH_SIZE@ указывает размер этого буфера.

h4(ihead). Буфер трафарета

p(ibody). Используется совместо OpenGL и OpenGL ES. Содержит информацию о трафаретах, созданных во время растеризации. @EGL_STENCIL_SIZE@ соответветствует размеру этого буфера.

h4(ihead). Буфер смешения (Mutlisample Buffer)

p(ibody). Может быть использован совместо OpenGL, OpenGL ES и OpenVG, совместное использование никто не гарантирует. Содержит значения цвета, трафаретов, глубины, сгенерированные при смешенашнной растеризации. Формат этого буфера не гарантируется спецификацией, по этому ко всему содержимому не должно быть прямых обращений. Только сущность буфера и номера образцов должно использоваться с EGL.

p(ibody). Операции с поверхностью, такие как отправка по @eglSwapBuffers ()@, копирование по @eglCopyBuffers ()@, чтение из буфера цвета, использую клиентские API и связывание контекста клиентского API к поверхности, могут привести к приравнению буфера смешения к буферу цвета.

p(ibody). @EGL_SAMPLE_BUFFERS@ означает количество буферов мультисемплирования, должен содержать ноль или еденицу. @EGL_SAMPLES@ определяет количество образцов на пиксель, если @EGL_SAMPLE_BUFFERS@ равен нулю, то @EGL_SAMPLES@ должен быть нулём, иначе значения бит цвета, глубины, шаблонов для каждого образца в буфере смешения определён в атрибутах @EGL_*_SIZE@.

h4(ihead). Другие атрибуты EGL

p(ibody). Если EGLConfig поддерживает окна, то можно получить ассоциированный экран. @EGL_NATIVE_VISUAL_ID@ определяет идентификатор этого экрана, а @EGL_NATIVE_VISUAL_TYPE@ определяет его тип. Если нет ассоциированного экрана, то при запросе @EGL_NATIVE_VISUAL_ID@ возвращается 0, а при запросе @EGL_NATIVE_VISUAL_TYPE@ возвращается @EGL_NONE@.

p(ibody). Тип идентификатора экрана зависит от реализации. К примеру, для оконной системы X идентификатором будет являться структура, типа XID.

h3(#surfaces). Поверхности.

|_\5. Атрибуты поверхностей для отрисовки. |
|_. 			Атрибут				|_.	 Тип	|_. Используется[6] |_. Базовое значение				|_. Описание	|
| EGL_CONFIG_ID						| integer	|=. @----@			|=. -[7]							| ID EGLConfig, относительно которого создаётся эта поверхность.	|
| EGL_PIXEL_ASPECT_RATIO[8]			| integer	|=. @----@			|=. -								| Сотношение сторон для одного пикселя. Значение возвращается умноженным на @EGL_DISPLAY_SCALING@. Для многих дисплеев возвращается значение @EGL_DISPLAY_SCALING@.	|
| EGL_HORIZONTAL_RESOLUTION[8][9]	| integer	|=. @----@			|=. -								| Горизонтальный шаг точки.	|
| EGL_VERTICAL_RESOLUTION[8][9]		| integer	|=. @----@			|=. -								| Вертикальный шаг точки.	|
| EGL_HEIGHT[10]					| integer	|=. @+---@			|=. 0								| Высота поверхности.	|
| EGL_WIDTH[10]						| integer	|=. @+---@			|=. 0								| Ширина поверхности.	|
| EGL_LARGEST_PBUFFER				| boolean	|=. @+---@			|=. EGL_FALSE						| Запрашивает наиболее больший размер буфера. При этом, ширина и высота выделенного буфера никогда не будут превышать значений @EGL_HEIGHT@ и @EGL_WIDTH@.	|
| EGL_MIPMAP_TEXTURE				| boolean	|=. @+--+@			|=. EGL_FALSE						| @EGL_TRUE@, если текстура поддерживает множественные отображения (mipmaps). Имеет смысл включать только при @EGL_TEXTURE_FORMAT@ не содержащим @EGL_NO_TEXTURE@.	|
| EGL_MIPMAP_LEVEL					| integer	|=. @+--+@			|=. 0								| Уровень отображения, в который предпологается отрисовка.
Если OpenGL ES не поддерживается поверхностью, то все попытки изменить эти значения приведут к @EGL_BAD_PARAMETER@.
Если @EGL_TEXTURE_FORMAT@ или @EGL_TEXTURE_TARGET@ содержит @EGL_NO_TEXTURE@, то изменение значения этого атрибута не даст эфекта. <!-- if the value of pbuffer attribute EGL_TEXTURE_FORMAT is EGL_NO_TEXTURE, if the value of attribute EGL_TEXTURE_TARGET is EGL_NO_TEXTURE, or if surface if not a pbuffer, then attribute EGL_MIPMAP_LEVEL may be set, but has no effect -->|
| EGL_MULTISAMPLE_RESOLVE			| enum		|=. @++++@			|=. EGL_MULTISAMPLE_RESOLVE_DEFAULT	| Вариант поведение смесителя.	|
| EGL_SWAP_BEHAVIOR					| enum		|=. @++++@			|=. определяется библиотекой		| Определяет фильтр буфера цвета, при отправке оного с помощью @eglSwapBuffers ()@.	|
| EGL_RENDER_BUFFER					| enum		|=. @--+-@			|=. EGL_BACK_BUFFER					| Какой буфер будет использоваться клиентским API для рисования. Для карт пикселей значение всегда равно @EGL_SINGLE_BUFFER@, для пиксельнго буфера всегда @EGL_BACK_BUFFER@.	|
| EGL_TEXTURE_TARGET				| enum		|=. @+--+@			|=. EGL_NO_TEXTURE					| Указывает где будет использов	|
| EGL_TEXTURE_FORMAT				| enum		|=. @+--+@			|=. EGL_NO_TEXTURE					| Формат текстуры: RGB, RGBA или никакой.	|
| EGL_VG_COLORSPACE[11]				| enum		|=. @++++@			|=. EGL_VG_COLORSPACE_sRGB			| Пространство цвета для OpenVG.	|
| EGL_VG_ALPHA_FORMAT[11]			| enum		|=. @++++@			|=. EGL_VG_ALPHA_FORMAT_NONPRE		| Формат прозрачности для OpenVG.	|

fn6. Поддержка атрибутов в вызовах:
	1: @eglCreatePbufferSurface ()@,
	2: @eglCreatePixmapSurface ()@,
	3: @eglCreateWindowSurface ()@,
	4: @eglCreatePbufferSurfaceFromClientBuffer ()@
@+@ -- Используется
@-@ -- Не используется

fn7. Помеченные "-" в этом столбце могут быть только опрошены (т.е. переданы @eglQuerySurface ()@ и подобным).

fn8. Для заэкранных поверхностей (пиксельные буфера и карты) или поверхностей, чьи значения соотношения или размера не известны, возвращается @EGL_UNKNOWN@ (-1).

fn9. Значение возвращается в пиксель/метр, умноженное на @EGL_DISPLAY_SCALING@ (10000).

fn10. Опрос этих атрибутов возвращает значение высоты и ширины буфера. Для окон и карт пикселей эти значения соотносимы со значениеями высоты и ширины связаных ресурсов. Если размеры связанного окна изменены, то эти значения должны изменяться библиотекой с вызовом @eglSwapBuffers ()@.

fn11. Используется только OpenVG, являются определяющими для @VGImageFormat@.

|_. Ключ	|_. Описание	|
|_\2. Возможные значения @EGL_MUTISAMPLE_RESOLVE@.	|
| EGL_MULTISAMPLE_RESOLVE_DEFAULT	| Метод фильтрации зависит от реализации библиотеки.	|
| EGL_MULTISAMPLE_RESOLVE_BOX		| TODO. Требует указания @EGL_MULTISAMPLE_RESOLVE_BOX_BIT@ в @EGL_SURFACE_TYPE@ при создании поверхности, иначе генерирует @EGL_BAD_MATCH@.	|
|_\2. Возможные значения @EGL_SWAP_BEHAVIOR@.	|
| EGL_BUFFER_PRESERVED	| Содержимое цветового буфера не изменятся. Требует наличия @EGL_SWAP_BEHAVIOR_PRESERVED_BIT@ в @EGL_SURFACE_TYPE@ при создании поверхности, иначе генерирует @EGL_BAD_MATCH@. |
| EGL_BUFFER_DESTROYED	| Содержимое цветового буфера может быть уничтожено или изменено. |
|_\2. Возможные значения @EGL_RENDER_BUFFER@	|
| EGL_SINGLE_BUFFER	| Отрисовка происходит в видимое окно.	|
| EGL_BACK_BUFFER	| Отрисовка происходит в задний буфер.	|
|_\2. Возможные значения @EGL_TEXTURE_TARGET@.	|
| EGL_NO_TEXTURE			| Нет текстуры.	|
| EGL_TEXTURE_FORMAT_2D		| Позволяет подготовку текстуры для OpenGL ES.	|
|_\2. Возможные значения @EGL_TEXTURE_FORMAT@.	|
| EGL_NO_TEXTURE			| Нет текстуры. |
| EGL_TEXTURE_FORMAT_RGB	| RGB формат текстуры.	|
| EGL_TEXTURE_FORMAT_RGBA	| RGBA формат текстуры.	|
|_\2. Возможные значения @EGL_VG_COLORSPACE@ |
| EGL_VG_COLORSPACE_sRGB	| Соотвествует @VGImageFormat@ вида @VG_s*@.	|
| EGL_VG_COLORSPACE_LINEAR	| Соответствует @VGImageFormat@ вида @VG_l*@.	|
|_\2. Возможные значения @EGL_VG_ALPHA_FORMAT@ |
| EGL_VG_ALPHA_FORMAT_NONPRE	| Прерасчётов не производится.	|
| EGL_VG_ALPHA_FORMAT_PRE		| Прерасчитанные значения прозрачности. |

TODOэ

