---
layout: posts
date: 2011-03-22 13:23:01 +00:00
title: MaraDNS. разделение на подсети
description: Выдача разный IP-адресов на одну зону в разные подсети с помощью maradns
---

Когда-то давным давно, когда Всемирная Информационная Сеть не была обременена NAT и прочими приватными прелестями, то необходимость в подобных извращениях отсутствовала, но теперь...

Что имеем:
 * доменную зону, к примеру samplehost.net
 * внутреннюю подсеть 192.168.2.0/24
 * внешнюю подсеть 10.0.0.0/8

Что следует заиметь:
 * "MaraDNS":http://www.maradns.org , в нашем случае
 * интерпретатор или компилятор sh-сценариев (есть почти в любом linux-дистрибутиве)
 * iptables

Для получения MaraDNS в популярных дистрибутивах можно вызвать @apt-get install maradns@ или @emerge net-dns/maradns@ или же самому скачать с сайта и собрать тёплой комбинацией @./confgure && make && make install@.

На данный момент в DNS не предусмотренна возможность легального выявления IP-адреса запрашивающего, но мы можем попытаться выдавать ответ в зависимости от адреса клиента, инициировавшего подключение к серверу (не самая лучшая идея, но других вариантов, похоже, нет). Как сделать это с сервером "BIND":http://en.wikipedia.org/wiki/BIND можно почитать по этому адресу: "http://samag.ru/archive/article/771":http://samag.ru/archive/article/771 , мы же пойдём иным путём.

Специально для нашего случая были придуманы следующий набор костылей: "https://github.com/noktoborus/-MORE":https://github.com/noktoborus/-MORE/tree/e3afec0c360578c4a2481df1cde62a8f45f3b773/maradns-split .

{% highlight sh %}
{% include maradns-split/buildtpl.sh %}
{% endhighlight %}

Для генерации конфигураций по шаблону используется @buildtpl.sh@ и тот же sh, в качестве внутришаблонного языка.

{% highlight sh %}
{% include maradns-split/runbuild.sh %}
{% endhighlight %}

В качестве индекса генерируемых конфигураций используется @runbuild.sh@, он последовательно запускает @buildtpl.sh@.

Простой шаблон для нашего хоста somplehost.net будет выглядить так:

{% highlight sh %}
{% include maradns-split/config.samplehost.sh %}
{% endhighlight %}

В конфигурации шаблона @config/config.samplehost.sh@ объявляем нужные нам переменные окружения. Переменная @$NAMES@ служит для указания требуемых генераций из шаблона, переменные для каждого шаблона задаются в блоках @case@, с тем же индитификатором, что был указан в @$NAMES@.

{% highlight sh %}
{% include maradns-split/mararc %}
{% endhighlight %}

Используем простейшую конфигурацию MaraDNS для обслуживания нашей зоны. Указываем что хотим использовать переменную @$PORT@ из конфигурации шаблона, в качестве порта сервера и базу данных для нашей зоны. переменная @$NAME@ будет соответствовать одному из именований, указанным в @$NAMES@.

{% highlight sh %}
{% include maradns-split/db.samplehost %}
{% endhighlight %}

Так же создаём простенький шаблон для нашей dns-зоны (делаем "динамическим" значение для нашей A-записи, с помощью переменной @$HOST_A@).

Теперь запускаем @runbuild.sh@, удостоверяемся что конфигурации были созданы, в нашем случае это файлы (output/mararc.internal, output/mararc.external, output/db/db.samplehost.internal, output.samplehost.external), и приступаем к самому интересному: к запуску MaraDNS.

Для запуска будем использовать следующий сценарий:

{% highlight sh %}
{% include maradns-split/watchrun.sh %}
{% endhighlight %}

Этот скрипт будет перезапускать maradns, в случаях: завершения самого maradns или обновления одного из указанных файлов. Наблюдаемые файлы, да и пути до maradns указывается в следующих строках:

{% highlight sh %}
{% include maradns-split/watchrun.sh.part0 %}
{% endhighlight %}

Формат записи такой: @путь к исполняемому файлу и командные ключи|наблюдаемые_файлы через_пробел@. После всех этих приготовлений нам только остаётся прописать правила для iptables и запустить maradns.

{% highlight sh %}
{% include maradns-split/iptables %}
{% endhighlight %}

Как мы помним, у нас есть внешняя сеть (external) 10.0.0.0/8 и внутренняя (internal) 192.168.2.0/24. Для внешней сети нас dns-сервер размещается прямо на 53/udp порту, а для внутренней сети нас сервер размещается на 10053/udp порту и имеет правило в iptables, перенаправляющее запросы из подсети 192.168.2.0/24 и порта 53/udp на порт 10053/udp. 

