---
layout: posts
date: 2013-11-08 10:36:47 +04:00
title: Вальс в ритме mongo
description: Собираем репликсет из экскрементов
---

h3(#problem). Задача

Построить базовую реплику с бекапированием данных на разных узлах, при условии что некоторые узлы могут быть за натом.

h3(#chooseone). Видимые варианты

# Забыть про дополнительные узлы
# Использовать прямую видимость до большинства узлов, остальных завернуть в VPN-тунель
# Применить какой-нибудь хитрый туннель

h3(#meditation). Размышление

Забыть, конечно же, не интересно, но возможно ибо один дополнительный узел распологается наиболее близко к серверу тестовой базы данных (в помещении с программистами) и нужна лишь для того, что бы можно было быстро снять текущее состояние с БД и применить его на тестовый сервер.
Вариант с VPN не очень удобен ибо придётся придумывать хитрую топологию, что бы как-то компенсировать прохождение трафика через один сервер).
Последний вариант кажется немного странным, но вполне приемлемым, в особенности, из-за некоторых удобств, которые с ним получаем.

h3(#nut). Суть

В следующем: на каждом сервере, где должна быть инстанция mongodb поднимается пачка конфигураций xinetd, в которых, при подключении на порт (уникальный для каждой инстанции реплики) открывается ssh-соеденение к другому серверу с попыткой подцепиться netcat'ом на порт соовтествующей монги.

h3(#solving). Выполнение

Используется дополнительное ПО: openssh, xinetd, netcat (openbsd-netcat или gnu-netcat).
Решение накатило как-то неожиданно накатило с волной любви и обожания inetd (тоска по старым временам, когда он был действительно нужен) и какой-то общей лёгкой упоротостью.

Для xinetd указываем, что bind() нужно выполнять на имя @repl@ (которое у нас заботливо добавлено в /etc/hosts каждого сервера или любым другим способом, указывает, к примеру, на 127.0.5.2 во избежания конфликтов с "локальной" БД). Порты составляем уникальные для каждой новой инстанции mongodb, @type@ в @UNLISTED@ для недопущения отказа в запуске в связи с отсутсвием записи в /etc/services, @wait@ назначаем @no@, что необходимо для SOL_STREAM, если желаем принимать больше одного одновременных подключений на порт, и указываем пользователя @repl@, который так же добавлен на всех серверах, в домашней директории которого хранятся дополнительная конфигурация для ssh, ключи и разный интересный шлак.
Важно учесть, что опция @disable@ на каждом сервере должна иметь свою позицию, т.е. исключаться там, где запущена инстанция mongodb с тем же портом. @disable@ в @yes@ недопускает запуск данной конфигурации.
Важно, что бы для nc была указана опция -w (idle timeout, для netcat опция -t (у меня короткая не заработала, --idle-timeout= более действенна), иначе xinetd не завершает процессы по закрытию сокета (из-за @wait@ в @no@), а сама mongodb переподключается каждые 1-2 секунды к своей подруге.

{% highlight text %}
{% include mongodance/xinetd.conf %}
{% endhighlight %}

Для ssh, в домашней директории пользователя repl создаём ключи (`ssh-keygen`), и конфигурацию .ssh/config с указанием не задавать вопросов при добавлении ключей в список known_hosts (@StrictHostKeyChecking@), использовать для known_hosts файл /dev/null (@UserKnownHostsFile@), почаще проверять наличие коннекта (@ServerAliveInterval@ и @ConnectTimeout@). @LogLevel@ в значении @QUIET@ нужен для того, что бы ssh не капала на stdout/stderr (они пробрасываются xinetd в сокет) и лишний мусор не отправлялся клиенту.

{% highlight text %}
{% include mongodance/ssh_conf %}
{% endhighlight %}

MongoDB запускаем с привычными ключами (адрес 127.0.5.2 у нас назначен для repl в файле /etc/hosts, для удобного доступа):
@--replSet rs --port 27017 --bind_ip 127.0.5.2@ на server2
@--replSet rs --port 27117 --bind_ip 127.0.5.2@ на server1

Для инициализации нужно будет проделать следующее:
# Проинициализивароть реплику, начиная, к примеру, с server1
# Подправить конфигурацию, что бы в конфиге реплики указывался именно repl:27017, а не localhost:27017 или еще какая ересь
# Добавить другую инстанцию

{% highlight text %}
> rs.initiate()
PRIMARY> conf = rs.config()
PRIMARY> conf.members[0].host = 'repl:27117'
PRIMARY> rs.reconfig(conf)
PRIMARY> rs.add('repl:27017')
{% endhighlight %}

В случае удачи, можно зайти на любой из компьтеров реплики и набрать что-то вроде mongo repl:27017, mongo:27117, ... не запоминая странных доменных имён.

h3(#result). Результат

В результате боль и дополнительный страх в виде потери коннекта к другому серверу (mongodb, как оказалось, как-то странно относится к выпадению активистов реплики) и весьма удобный способ доступа ко всем инстансам с любого сервера реплики и возможность крутить подключения как удобно. К примеру, для компьютера за NAT-ом исходящие соеденения до остальных серверов назначаются как есть, а входящий идут через шлюз (с прокидыванием портов, под VPN или как еще).
Особого падения производительности не замечено, ssh под активным импортом отъедает около 20-30% процессорного времени (по сравнению с 150% mongodb совсем немного).

